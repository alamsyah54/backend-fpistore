// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  role         Role           @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isVerified   Boolean?
  isDelete     Boolean?
  refreshToken RefreshToken[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("refresh_tokens")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String      @db.LongText
  feature     Json?
  price       Int
  stock       Int
  image       String
  color       String
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  discount    Discount[]
  OrderItem   OrderItem[]

  @@map("products")
}

model Discount {
  id          Int      @id @default(autoincrement())
  amount      Int
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])

  @@map("discounts")
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String
  OrderItem   OrderItem[]
  totalAmount Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      OrderStatus @default(WAITING_FOR_PAYMENT)
  Payment     Payment?
  phoneNumber Int

  @@map("orders")
}

enum OrderStatus {
  WAITING_FOR_PAYMENT @map("WAITING_FOR_PAYMENT")
  ORDER_PROCESSED     @map("ORDER_PROCESSED")
  COMPLETED           @map("COMPLETED")
}

model OrderItem {
  id        Int  @id @default(autoincrement())
  qty       Int
  total     Int
  discValue Int?
  price     Int

  orderId   Int
  productId Int

  orders   Order   @relation(fields: [orderId], references: [id])
  products Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id              Int           @id @default(autoincrement())
  invoiceNumber   String
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  amount          Int
  snapToken       String?
  snapRedirectUrl String?

  orderId Int @unique

  orders Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

enum PaymentStatus {
  COMPLETED @map("COMPLETED")
  CANCELLED @map("CANCELLED")
  DENIED    @map("DENIED")
  EXPIRED   @map("EXPIRED")
  PENDING   @map("PENDING")
}

enum PaymentMethod {
  QRIS            @map("QRIS")
  VIRTUAL_ACCOUNT @map("VIRTUAL_ACCOUNT")
}
